from flask import Flask, request, render_template, jsonify, send_from_directory
import os
import time
import random
import json
from werkzeug.utils import secure_filename
import uuid

# ЁЯФе Gemini API import
import google.generativeai as genai

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max

# Create directories
os.makedirs('uploads', exist_ok=True)
os.makedirs('static/audio', exist_ok=True)

# ============ ЁЯФС GEMINI API CONFIGURATION ============
# ЁЯСЗ YAHAN APNI API KEY DAALNI HAI:
GEMINI_API_KEY = "AIzaSyAkX4qH0wAF0fNfVeMCGOfyynvHCBGI6EE"  # ЁЯФ┤ CHANGE THIS!

# Configure Gemini
if GEMINI_API_KEY != "AIzaSyAkX4qH0wAF0fNfVeMCGOfyynvHCBGI6EE":
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        GEMINI_ENABLED = True
        print("тЬЕ Gemini AI enabled!")
    except Exception as e:
        print(f"тЭМ Gemini API error: {e}")
        GEMINI_ENABLED = False
else:
    GEMINI_ENABLED = False
    print("тЪая╕П Gemini API key not provided - using fallback solutions")
# ====================================================

# Plant diseases database (Hindi solutions) - Fallback ke liye
DISEASE_SOLUTIONS = {
    "late_blight": {
        "name": "рдЭреБрд▓рд╕рд╛ рд░реЛрдЧ (Late Blight)",
        "solution": """
ЁЯНЕ **рдЭреБрд▓рд╕рд╛ рд░реЛрдЧ рдХрд╛ рдЗрд▓рд╛рдЬ:**

**рддреБрд░рдВрдд рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдХрд╛рдо:**
тАв рдкреНрд░рднрд╛рд╡рд┐рдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рддреБрд░рдВрдд рддреЛрдбрд╝рдХрд░ рдЬрд▓рд╛ рджреЗрдВ
тАв рдЦреЗрдд рд╕реЗ рдкрд╛рдиреА рдирд┐рдХрд╛рд╕реА рдХрд╛ рдкреНрд░рдмрдВрдз рдХрд░реЗрдВ
тАв рдЫрд╛рдпрд╛рджрд╛рд░ рдФрд░ рдирдореА рд╡рд╛рд▓реА рдЬрдЧрд╣ рд╕реЗ рдмрдЪреЗрдВ

**рдШрд░реЗрд▓реВ рдЙрдкрд╛рдп:**
тАв рдиреАрдо рдХрд╛ рддреЗрд▓: 10ml + рдкрд╛рдиреА 1 рд▓реАрдЯрд░ рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рдЫрд┐рдбрд╝рдХрд╛рд╡
тАв рд▓рд╣рд╕реБрди-рдкреНрдпрд╛рдЬ рдХрд╛ рдШреЛрд▓: 50g рд▓рд╣рд╕реБрди + 2 рдкреНрдпрд╛рдЬ рдкреАрд╕рдХрд░ 1 рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдПрдВ
тАв рдмреЗрдХрд┐рдВрдЧ рд╕реЛрдбрд╛: 5g рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ

**рд░рд╛рд╕рд╛рдпрдирд┐рдХ рдЗрд▓рд╛рдЬ (рдЬрд░реВрд░рдд рдкрдбрд╝рдиреЗ рдкрд░):**
тАв рдореИрдВрдХреЛрдЬреЗрдм 75% WP - 2g рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА
тАв рдХреЙрдкрд░ рдСрдХреНрд╕реАрдХреНрд▓реЛрд░рд╛рдЗрдб - 3g рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА

**рд░реЛрдХрдерд╛рдо:**
тАв рдкреМрдзреЛрдВ рдХреЗ рдмреАрдЪ рдЙрдЪрд┐рдд рджреВрд░реА рд░рдЦреЗрдВ
тАв рд╕реБрдмрд╣ рдХреА рдзреВрдк рд▓рдЧрдиреЗ рджреЗрдВ
тАв рдбреНрд░рд┐рдк рдЗрд░рд┐рдЧреЗрд╢рди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        """
    },
    "bacterial_spot": {
        "name": "рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ",
        "solution": """
ЁЯжа **рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд╕реНрдкреЙрдЯ рдХрд╛ рдЗрд▓рд╛рдЬ:**

**рдкрд╣рдЪрд╛рди:** рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рдХрд╛рд▓реЗ рдзрдмреНрдмреЗ, рдлрд▓реЛрдВ рдкрд░ рдЫреЛрдЯреЗ рдХрд╛рд▓реЗ рдирд┐рд╢рд╛рди

**рддреБрд░рдВрдд рдЙрдкрд╛рдп:**
тАв рд╕рдВрдХреНрд░рдорд┐рдд рднрд╛рдЧреЛрдВ рдХреЛ рдХрд╛рдЯрдХрд░ рдЕрд▓рдЧ рдХрд░реЗрдВ
тАв рддрд╛рдВрдмреЗ рд╡рд╛рд▓реА рджрд╡рд╛ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ
тАв рдкрд╛рдиреА рд╕реАрдзреЗ рдкрддреНрддрд┐рдпреЛрдВ рдкрд░ рди рдбрд╛рд▓реЗрдВ

**рдЬреИрд╡рд┐рдХ рдЗрд▓рд╛рдЬ:**
тАв рдиреАрдо рдХреА рдЦрд▓реА: рдорд┐рдЯреНрдЯреА рдореЗрдВ рдорд┐рд▓рд╛рдПрдВ
тАв рдЧреЛрдореВрддреНрд░: 200ml рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА рдореЗрдВ рдорд┐рд▓рд╛рдХрд░ рд╕реНрдкреНрд░реЗ
тАв рд╣рд▓реНрджреА рдкрд╛рдЙрдбрд░: 10g рдкреНрд░рддрд┐ рд▓реАрдЯрд░ рдкрд╛рдиреА

**рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдВ:**
тАв рдмрд╛рд░рд┐рд╢ рдХреЗ рдмрд╛рдж рддреБрд░рдВрдд рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ
тАв рдЦреЗрдд рдореЗрдВ рд╕рдлрд╛рдИ рд░рдЦреЗрдВ
тАв рдмреАрдЬ рдХреЛ рдмреЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдЙрдкрдЪрд╛рд░рд┐рдд рдХрд░реЗрдВ
        """
    },
    "healthy": {
        "name": "рд╕реНрд╡рд╕реНрде рдлрд╕рд▓",
        "solution": """
тЬЕ **рдмрдзрд╛рдИ рд╣реЛ! рдЖрдкрдХреА рдлрд╕рд▓ рд╕реНрд╡рд╕реНрде рд╣реИ**

**рд╕реНрд╡рд╕реНрде рдлрд╕рд▓ рдмрдирд╛рдП рд░рдЦрдиреЗ рдХреЗ рддрд░реАрдХреЗ:**
тАв рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдЦреЗрдд рдХреА рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВ
тАв рд╕рдВрддреБрд▓рд┐рдд рдЦрд╛рдж рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
тАв рдЙрдЪрд┐рдд рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ

**рдкреЛрд╖рдг рдкреНрд░рдмрдВрдзрди:**
тАв NPK рдЦрд╛рдж: рдорд┐рдЯреНрдЯреА рдЬрд╛рдВрдЪ рдХреЗ рдЕрдиреБрд╕рд╛рд░
тАв рдЬреИрд╡рд┐рдХ рдЦрд╛рдж: рдЧреЛрдмрд░ рдХреА рдЦрд╛рдж рдпрд╛ рдХрдВрдкреЛрд╕реНрдЯ
тАв рдорд╛рдЗрдХреНрд░реЛ рдиреНрдпреВрдЯреНрд░рд┐рдПрдВрдЯреНрд╕ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡

**рдирд┐рд╡рд╛рд░рдХ рдЙрдкрд╛рдп:**
тАв рдиреАрдо рдХреА рдЦрд▓реА рдбрд╛рд▓рддреЗ рд░рд╣реЗрдВ
тАв рд╣рд░ 15 рджрд┐рди рдореЗрдВ рдиреАрдо рдХрд╛ рддреЗрд▓ рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ
тАв рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ
        """
    }
}

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/analyze', methods=['POST'])
def analyze():
    try:
        # Get form data
        photo = request.files.get('photo')
        question_text = request.form.get('question', '')  # From Web Speech API
        
        if not photo or not question_text:
            return jsonify({
                'success': False, 
                'error': 'рдлреЛрдЯреЛ рдФрд░ рд╕рд╡рд╛рд▓ рджреЛрдиреЛрдВ рдЬрд░реВрд░реА рд╣реИрдВ'
            })

        print(f"ЁЯУЭ Received question: {question_text}")

        # Save photo temporarily
        photo_filename = secure_filename(photo.filename)
        photo_path = os.path.join(app.config['UPLOAD_FOLDER'], photo_filename)
        photo.save(photo_path)

        # Simulate AI processing delay
        print("ЁЯФН AI analysis starting...")
        time.sleep(2)

        # Mock disease detection (in real app, use computer vision)
        detected_disease = mock_disease_detection(photo_path)
        print(f"ЁЯПе Detected disease: {detected_disease}")
        
        # Generate solution using Gemini AI or fallback
        if GEMINI_ENABLED:
            print("ЁЯдЦ Generating solution with Gemini AI...")
            customized_solution = generate_gemini_solution(detected_disease, question_text)
        else:
            print("ЁЯУЭ Using fallback solution...")
            solution_data = DISEASE_SOLUTIONS.get(detected_disease, DISEASE_SOLUTIONS["late_blight"])
            customized_solution = customize_solution(solution_data, question_text)

        # Clean up uploaded file
        os.remove(photo_path)

        return jsonify({
            'success': True,
            'solution': customized_solution,
            'detected_disease': DISEASE_SOLUTIONS.get(detected_disease, DISEASE_SOLUTIONS["late_blight"])['name'],
            'confidence': random.randint(85, 95),
            'ai_powered': GEMINI_ENABLED
        })

    except Exception as e:
        print(f"тЭМ Error: {str(e)}")
        return jsonify({'success': False, 'error': str(e)})

def mock_disease_detection(image_path):
    """Mock function to simulate disease detection"""
    diseases = ['late_blight', 'bacterial_spot', 'healthy']
    weights = [0.4, 0.3, 0.3]  # Probability weights
    return random.choices(diseases, weights=weights)[0]

def generate_gemini_solution(detected_disease, question):
    """Generate solution using Gemini AI"""
    try:
        model = genai.GenerativeModel('gemini-pro')
        
        # Disease info for context
        disease_info = DISEASE_SOLUTIONS.get(detected_disease, DISEASE_SOLUTIONS["late_blight"])
        
        prompt = f"""
рдЖрдк рдПрдХ expert рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣рдХрд╛рд░ рдФрд░ plant pathologist рд╣реИрдВред 

DETECTED DISEASE: {disease_info['name']}
FARMER'S QUESTION: "{question}"

рдПрдХ рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рди рдХреА рдлрд╕рд▓ рдореЗрдВ рдпрд╣ рд╕рдорд╕реНрдпрд╛ detect рд╣реБрдИ рд╣реИред рдХреГрдкрдпрд╛ Hindi рдореЗрдВ detailed, practical solution рджреЗрдВ рдЬреЛ рдПрдХ рдЖрдо рдХрд┐рд╕рд╛рди рд╕рдордЭ рд╕рдХреЗред

Response format:
**рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:** {question}

**рдкрд╣рдЪрд╛рдиреА рдЧрдИ рд╕рдорд╕реНрдпрд╛:** {disease_info['name']}

**рддреБрд░рдВрдд рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдХрд╛рдо:**
тАв [Immediate actions]

**рдШрд░реЗрд▓реВ/рдЬреИрд╡рд┐рдХ рдЙрдкрдЪрд╛рд░:**
тАв [Organic solutions with exact quantities]

**рд░рд╛рд╕рд╛рдпрдирд┐рдХ рджрд╡рд╛рдИ (рдЬрд░реВрд░рдд рдкрдбрд╝рдиреЗ рдкрд░):**
тАв [Chemical treatments if needed]

**рднрд╡рд┐рд╖реНрдп рдореЗрдВ рд░реЛрдХрдерд╛рдо:**
тАв [Prevention tips]

**рдЕрддрд┐рд░рд┐рдХреНрдд рд╕реБрдЭрд╛рд╡:**
тАв [Specific advice based on farmer's question]

Simple Hindi рдореЗрдВ рд▓рд┐рдЦреЗрдВред Technical terms рдХреЗ рд╕рд╛рде explanation рднреА рджреЗрдВред Practical рдФрд░ cost-effective solutions рдкрд░ focus рдХрд░реЗрдВред
        """
        
        response = model.generate_content(prompt)
        
        if response.text:
            print("тЬЕ Gemini AI response generated successfully!")
            return response.text
        else:
            print("тЪая╕П Empty Gemini response, using fallback")
            return customize_solution(disease_info, question)
            
    except Exception as e:
        print(f"тЭМ Gemini API error: {e}")
        # Fallback to static solution
        disease_info = DISEASE_SOLUTIONS.get(detected_disease, DISEASE_SOLUTIONS["late_blight"])
        return customize_solution(disease_info, question)

def customize_solution(solution_data, question):
    """Customize solution based on user's question (Fallback method)"""
    base_solution = solution_data['solution']
    
    # Add question-specific responses
    question_lower = question.lower()
    
    if 'рдХреНрдпрд╛' in question or 'рдХреМрди' in question or 'what' in question_lower:
        prefix = f"**рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:** {question}\n\n**рдЬрд╡рд╛рдм:** рдпрд╣ {solution_data['name']} рд╣реИред\n\n"
    elif 'рдХреИрд╕реЗ' in question or 'how' in question_lower:
        prefix = f"**рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:** {question}\n\n**рдЗрд▓рд╛рдЬ рдХрд╛ рддрд░реАрдХрд╛:**\n\n"
    elif 'рджрд╡рд╛' in question or 'medicine' in question_lower:
        prefix = f"**рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:** {question}\n\n**рджрд╡рд╛рдИ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА:**\n\n"
    else:
        prefix = f"**рдЖрдкрдХрд╛ рд╕рд╡рд╛рд▓:** {question}\n\n**рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА:**\n\n"
    
    return prefix + base_solution

# Last line change рдХрд░реЛ:
if __name__ == '__main__':
    print("ЁЯМ╛ KisanAI Sahayak Starting...")
    if GEMINI_ENABLED:
        print("ЁЯдЦ With Gemini AI Integration")
    else:
        print("ЁЯУЭ Using Static Solutions (Add API key for AI)")
    print("ЁЯУ▒ Browser рдореЗрдВ рдЬрд╛рдПрдВ: http://localhost:5000")
    
    # ЁЯФе рдпрд╣ line change рдХрд░реЛ:
    app.run(debug=True, host='127.0.0.1', port=5000)  # localhost force рдХрд░реЛ

